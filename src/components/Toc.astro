---
import { Icon } from "astro-icon/components";
const { headings, translations } = Astro.props.frontmatter || Astro.props;

function buildToc(headings: any[]) {
  const toc: any[] = [];
  const parentHeadings = new Map();
  headings.forEach((h: any) => {
    const heading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    // Change 2 to 1 if your markdown includes your <h1>
    if (heading.depth === 2) {
      toc.push(heading);
    } else {
      parentHeadings.get(heading.depth - 1).subheadings.push(heading);
    }
  });
  return toc;
}

const tableOfContents = buildToc(headings);
---

<nav class="fixed left-4 bottom-6" aria-label={translations.toc}>
  
<details class="prose dark:prose-invert text-sm w-auto md:w-80 max-w-80 dark:bg-slate-900 bg-white border-2 border-emerald-400 rounded-md right-auto cursor-pointer group max-h-24 open:max-h-96 transition-all duration-200 overflow-y-auto">
  
  <summary class="flex dark:bg-slate-900 bg-white sticky top-0 p-2 gap-2 rounded-t-md group-open:border-b group-open:ring-transparent ring-offset-2 focus-visible:ring focus-visible:ring-2 focus-visible:ring-emerald-400 items-center text-sm fontblack">
    <Icon aria-hidden="true" class="w-8 h-8" name="toc" />
    <span class="sr-only md:not-sr-only group-open:not-sr-only">{translations.toc}</span>
  </summary>
  
  <ul class="px-2 md:px-10 w-full" >
    {headings && tableOfContents.map(heading => 
    
    <li>
      
      <a href={`#${heading.slug}`}>{heading.text}</a>

      {
        heading.subheadings.length > 0 && (
          <ul>
            {heading.subheadings.map((subheading: any) => (
              <li><a href={`#${subheading.slug}`}>{subheading.text}</a></li>
            ))}
          </ul>
        )
      }
      
    </li>)}
    
  </ul>
  
</details>

</nav>

<style>
  details::-webkit-scrollbar {
  @apply w-2;
}
 
details::-webkit-scrollbar-thumb {
  @apply bg-emerald-400 rounded-md;
}

details::-webkit-scrollbar-track {
  @apply bg-gray-100 rounded-md;
}
</style>